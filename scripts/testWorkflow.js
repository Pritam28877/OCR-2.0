const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const connectDB = require('../config/database');
const User = require('../models/User');
const Product = require('../models/Product');
const Quotation = require('../models/Quotation');
const { matchProducts } = require('../services/matchingService');
const { createQuotation, getQuotationById, updateQuotation } = require('../controllers/quotationController');

// --- Mock Express Request/Response Objects ---
const mockResponse = () => {
  const res = {};
  res.status = jest.fn().mockReturnValue(res);
  res.json = jest.fn().mockReturnValue(res);
  return res;
};

// --- Main Test Runner ---
const runTestWorkflow = async () => {
  let testUser;
  let createdQuotation;

  try {
    console.log('🚀 Starting end-to-end workflow test...');
    await connectDB();

    // 1. Setup a test user
    console.log('\n🔧 1. Setting up test user...');
    const email = 'testuser@example.com';
    testUser = await User.findOne({ email });
    if (!testUser) {
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash('password123', salt);
      testUser = await new User({
        displayName: 'Test User',
        email,
        password: hashedPassword,
        roles: ['user']
      }).save();
      console.log('✅ Test user created.');
    } else {
      console.log('✅ Test user already exists.');
    }

    // 2. Simulate OCR data
    const sampleOcrData = [
      { product_name: '10 sq mm wire', quantity: 2 },
      { product_name: 'Audio Port / Jack 3.5mm', quantity: 5 },
      { product_name: 'Imaginary Product XYZ', quantity: 1 },
    ];
    console.log('\n📋 2. Simulating OCR data:', sampleOcrData.map(p => p.product_name));

    // 3. Match Products
    console.log('\n🔍 3. Matching products with the database...');
    const matchingResult = await matchProducts(sampleOcrData);
    console.log('✅ Matching complete. Summary:', matchingResult.summary);
    console.log('   - Matched:', matchingResult.matchedProducts.map(p => p.matched.name));
    console.log('   - Unmatched:', matchingResult.unmatchedProducts.map(p => p.product_name));
    console.log('   - Suggestions:', matchingResult.suggestions.length > 0 ? 'Yes' : 'No');

    // 4. Simulate user verification and prepare quotation items
    const verifiedItems = matchingResult.matchedProducts.map(p => ({
      product: p.matched._id.toString(),
      quantity: p.extracted.quantity,
    }));

    if (verifiedItems.length === 0) {
      throw new Error('No products were matched, cannot proceed to create quotation.');
    }
    console.log('\n👍 4. Simulating user verification. Creating quotation with:', verifiedItems.length, 'items');

    // 5. Create Quotation
    const quotationPayload = {
      customer: { name: 'Test Customer Inc.', email: 'contact@testcustomer.com' },
      items: verifiedItems,
      notes: 'This is a test quotation generated by an automated script.',
    };
    
    const createReq = { body: quotationPayload, user: testUser };
    const createRes = {
        status: (code) => ({
            json: (data) => {
                if (data.success) {
                    console.log('\n✅ 5. Quotation created successfully!');
                    console.log('   - Quotation Number:', data.data.quotationNumber);
                    createdQuotation = data.data;
                } else {
                    throw new Error(`Quotation creation failed: ${data.message}`);
                }
            }
        })
    };
    await createQuotation(createReq, createRes);

    // 6. Retrieve Quotation to Verify
    const getReq = { params: { id: createdQuotation._id } };
    const getRes = {
        status: (code) => ({
            json: (data) => {
                 if (data.success) {
                    console.log('\n✅ 6. Successfully retrieved quotation for verification.');
                    console.log('   - Grand Total:', data.data.grandTotal);
                } else {
                    throw new Error('Failed to retrieve created quotation.');
                }
            }
        })
    };
    await getQuotationById(getReq, getRes);

    // 7. Update Quotation
    const updatePayload = {
      notes: 'Updated notes: Customer requested an additional discount.',
      // Applying a 10% discount to the first item
      items: createdQuotation.items.map((item, index) => {
        const plainItem = item.toObject();
        if (index === 0) {
          plainItem.discountPercentage = 10;
        }
        plainItem.product = plainItem.product.toString();
        return plainItem;
      }),
    };
    
    const updateReq = { params: { id: createdQuotation._id }, body: updatePayload };
    const updateRes = {
        status: (code) => ({
            json: (data) => {
                if (data.success) {
                    console.log('\n✅ 7. Quotation updated successfully!');
                    console.log('   - New Grand Total:', data.data.grandTotal);
                    if (data.data.grandTotal >= createdQuotation.grandTotal) {
                        console.warn('   - Warning: Total did not decrease after discount.');
                    }
                } else {
                    throw new Error('Failed to update quotation.');
                }
            }
        })
    };
    await updateQuotation(updateReq, updateRes);

    console.log('\n🎉 End-to-end workflow test completed successfully!');

  } catch (error) {
    console.error('\n❌ Test workflow failed:', error.message);
  } finally {
    // 8. Cleanup
    if (createdQuotation) {
        await Quotation.findByIdAndDelete(createdQuotation._id);
        console.log('\n🗑️  Cleaned up created quotation.');
    }
    await mongoose.connection.close();
    console.log('🔒 Database connection closed.');
  }
};

runTestWorkflow();
